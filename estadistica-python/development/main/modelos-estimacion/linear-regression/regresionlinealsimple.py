# -*- coding: utf-8 -*-
"""RegresionLinealSimple.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/19DBzNWXs1vuCWMWKmJtainyaJyADc4SD
"""

import pandas as pd
import numpy as np

import matplotlib.pyplot as plt
from matplotlib import style
import seaborn as sns

from scipy.stats import pearsonr
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import r2_score
from sklearn.metrics import mean_squared_error
import statsmodels.api as sm
import statsmodels.formula.api as smf

"""## Configuración de Matplotlib"""

plt.rcParams['image.cmap'] = 'bwr'
# plt.rcParams['figure.dpi'] = 100
plt.rcParams['savefig.bbox'] = 'tight'
style.use('ggplot') or plt.style.use('ggplot')

"""## Configuaración de Warnings"""

import warnings
warnings.filterwarnings('ignore')

"""## Datos"""

equipos =[
    "Texas","Boston","Detroit","Kansas","St.","New_S.","New_Y.","Milwaukee","Colorado",
    "Houston","Baltimore","Los_An.","Chicago","Cincinnati","Los_P.","Philadelphia",
    "Chicago","Cleveland","Arizona","Toronto","Minnesota","Florida","Pittsburgh",
    "Oakland","Tampa","Atlanta","Washington","San.F","San.I","Seattle"
]
bateos = [
    5659,5710,5563,5672,5532,5600,5518,5447,5544,5598,
    5585,5436,5549,5612,5513,5579,5502,5509,5421,5559,
    5487,5508,5421,5452,5436,5528,5441,5486,5417,5421]
runs = [
    855,875,787,730,762,718,867,721,735,615,708,644,654,735,
    667,713,654,704,731,743,619,625,610,645,707,641,624,570,593,556
]

print(len(equipos))
print(len(bateos))
print(len(runs))
datos = pd.DataFrame({
    "equipos":equipos,
    "bateos":bateos,
    "runs":runs
})
datos.head()

"""# Representación Gráfica
Representar los datos para poder intuir si existe una realacion y cuantificar la relacion  mediante un coeficiente de correlación.
"""

fig, ax = plt.subplots(figsize=(6,3.84))
datos.plot(
    x = "bateos",
    y = "runs",
    c = "firebrick",
    kind = "scatter",
    ax = ax,
)

ax.set_title("Distribución de Bateos y Runs")

"""## Correlacion lineal entre las dos variables"""

corr_test = pearsonr(x = datos["bateos"],y=datos["runs"])
print("Coeficiente de correlación de Pearson: ",corr_test[0])
print("P-value: ",corr_test[1])
print(corr_test)

"""# Ajuste del modelo
Se ajusta el modelo empleando como variable respuesta **runs** y como predictor  **bateos**. Como en todo estudio predictivo, no solo es importante ajustar el modelo , sino tambien cuantificar su capacidad para predecir nuevas observaciones. Para poder hacer esta evaluacion, se dividen los datos en dos grupos, uno de entrenamiento y otro de test.

### División de los datos en train y test.
"""

x = datos[["bateos"]]
y = datos["runs"]
x_train,x_test,y_train,y_test = train_test_split(
    x.values.reshape(-1,1),
    y.values.reshape(-1,1),
    train_size = 0.8,
    random_state = 1234,
    shuffle = True
)

"""### Creación del modelo"""

modelo = LinearRegression()
modelo.fit(X = x_train.reshape(-1,1),y = y_train)

"""## Informacion del Modelo"""

print("Intercept:",modelo.intercept_)
print("Coeficiente:",list(zip(x.columns,modelo.coef_.flatten(),)))
print("Coeficiente de determinación R^2",modelo.score(x,y))

"""Evaluar la capacidad predictiva empleando el conjunto test.

## Error de test del Modelo
Evaluamos la capacidad predictiva empleando el conjunto de test.
"""

predicciones = modelo.predict(X = x_test)
print(predicciones[0:3,])
rmse = mean_squared_error(
    y_true = y_test,
    y_pred = predicciones,
    squared = False
    )
print(f"El error (rmse) de test es: {rmse}")

"""# Implementación con Statsmodels
## Division de los datos en train y test
"""

x = datos[["bateos"]]
y = datos["runs"]

x_train,x_test,y_train,y_test = train_test_split(
    x.values.reshape(-1,1),
    y.values.reshape(-1,1),
    train_size = 0.8,
    random_state = 1234,
    shuffle = True
)

"""## Creacion del modelo utilizando el modo formula (similar a R)"""

datos_train = pd.DataFrame(np.hstack((x_train,y_train)),columns = ["bateos","runs"])
modelo = smf.ols(formula = "runs ~ bateos",data = datos_train)
modelo = modelo.fit()
print(modelo.summary())

"""## Creacion del modelo utilizando matrices como en scikitlearn
A la matriz de predictores se le tiene que añadir una columna de 1s para el intercept del modelo
"""

x_train = sm.add_constant(x_train,prepend=True)
modelo = sm.OLS(endog = y_train,exog = x_train)
modelo = modelo.fit()
print(modelo.summary())

"""## Intervalos de confianza de los coeficientes
Intervalos de confianza para los coeficientes del modelo
"""

modelo.conf_int(alpha=0.05)

"""## Predicciones con intervalo de confianza del 95%"""

predicciones = modelo.get_prediction(exog = x_train).summary_frame(alpha=0.05)
predicciones.head(4)

"""# Representación grafica del modelo
## Predicciones con intervalo de confianza del 95%
"""

predicciones = modelo.get_prediction(exog = x_train).summary_frame(alpha=0.05)
predicciones["x"] = x_train[:,1]
predicciones["y"] = y_train
predicciones = predicciones.sort_values("x")

"""## Grafico del modelo"""

fig,ax = plt.subplots(figsize=(6,3.84))
ax.scatter(predicciones["x"],predicciones["y"],marker="o",color="gray")
ax.plot(predicciones["x"],predicciones["mean"],linestyle="-",label="OLS")
ax.plot(predicciones["x"],predicciones["mean_ci_lower"],linestyle="--",color="red",label="95% CI")
ax.plot(predicciones["x"],predicciones["mean_ci_upper"],linestyle="--",color="red")
ax.fill_between(
    x = predicciones["x"],
    y1 = predicciones["mean_ci_lower"],
    y2 = predicciones["mean_ci_upper"],
    alpha = 0.1
)
ax.legend()

"""# Error de test
Eror de test del modelo
"""

x_test = sm.add_constant(x_test,prepend=True)
predicciones = modelo.predict(exog = x_test)
rmse = mean_squared_error(
    y_true = y_test,
    y_pred = predicciones,
    squared = False
    )
print(f"El error (rmse) de test es: {rmse}")

