# -*- coding: utf-8 -*-
"""Modelo-de-Regresion-Lineal-Muliple.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1x94gOT4rj_aynWBRQaJB56qmws0L920J

# MODELO DE REGRESIÓN LINEAL MULTIPLE

Teniendo en cuenta las **horas trabajadas** en una organización determinar la cantidad de **vehiculos terminados**, considerando la importancia de las **horas de descanso** para garantizar productividad o un ambiente laboral más optimo.

¿Cuántos vehiculos deberían terminarse cuando se trabaja **n** horas y han tenido **m** horas de descanso?
"""

import pandas as pd
from sklearn.linear_model import LinearRegression
import numpy as np
from sklearn.metrics import r2_score
from mpl_toolkits.mplot3d import Axes3D
import matplotlib.pyplot as plt

df = pd.read_excel('datos.xlsx')
df.head(5)

"""## Variables

* **X1**: Horas trabajadas
* **X2**: Horas de descanso
* **Y** : Productos terminados
"""

x1 = "Horas Trabajadas"
x2 = "Horas Descanso"
y = "Productos Terminados"

"""## Configuración y Entrenamiento del Modelo"""

variables_x = [x1, x2]
variable_y = y
modelo = LinearRegression()
modelo.fit(df[variables_x], df[variable_y])
print("Coeficientes: ", modelo.coef_)
print("Intercepcion: ", modelo.intercept_)

"""## Ecuación del Plano"""

print("Ecuacon del plano: y = {} * Horas Trabajadas + {}  * Horas de Descanso + {}".format(
    round(modelo.coef_[0], 3),
    round(modelo.coef_[1], 3),
    round(modelo.intercept_, 3)
))
print("Coeficiente de determinacion: ", round(r2_score(df[variable_y], modelo.predict(df[variables_x])), 3))

"""## Grafica en 3D"""

fig = plt.figure()
ax = fig.add_subplot(111, projection='3d')
ax.scatter(df[x1], df[x2], df[y], c='r', marker='o')

x = np.linspace(df[x1].min(), df[x1].max(), num = 10)
y = np.linspace(df[x2].min(), df[x2].max(), num = 10)
x, y = np.meshgrid(x, y)
z = modelo.intercept_ + modelo.coef_[0] * x + modelo.coef_[1] * y

ax.plot_surface(x, y, z, alpha=0.5)
ax.set_xlabel(x1)
ax.set_ylabel(x2)
ax.set_zlabel("Vehiculos")
plt.show()

"""## Predicciones"""

horas_trabajadas = 12
horas_descanso = 2
prediccion = pd.DataFrame({x1: [horas_trabajadas], x2: [horas_descanso]})
autos_producidos = modelo.predict(prediccion)
print("La prediccion de autos producidos para",
      horas_trabajadas, "horas trabajadas y",
      horas_descanso, "horas de descanso",
      "es de: ",round(autos_producidos[0], 3)
      )

horas_trabajadas = 15
horas_descanso = 3
prediccion = pd.DataFrame({x1: [horas_trabajadas], x2: [horas_descanso]})
autos_producidos = modelo.predict(prediccion)
print("La prediccion de autos producidos para",
      horas_trabajadas, "horas trabajadas y",
      horas_descanso, "horas de descanso",
      "es de: ",round(autos_producidos[0], 3)
      )

horas_trabajadas = 18
horas_descanso = 6
prediccion = pd.DataFrame({x1: [horas_trabajadas], x2: [horas_descanso]})
autos_producidos = modelo.predict(prediccion)
print("La prediccion de autos producidos para",
      horas_trabajadas, "horas trabajadas y",
      horas_descanso, "horas de descanso",
      "es de: ",round(autos_producidos[0], 3)
      )